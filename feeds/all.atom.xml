<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kage's Blog</title><link href="http://kgat96.github.io/" rel="alternate"></link><link href="http://kgat96.github.io/feeds/all.atom.xml" rel="self"></link><id>http://kgat96.github.io/</id><updated>2015-08-15T12:00:00+08:00</updated><entry><title>Pandaboard bootload(uboot) 启动流程探究</title><link href="http://kgat96.github.io/articles/2015/08/15/pandaboard-bootload-process/" rel="alternate"></link><updated>2015-08-15T12:00:00+08:00</updated><author><name>Kage Shen</name></author><id>tag:kgat96.github.io,2015-08-15:articles/2015/08/15/pandaboard-bootload-process/</id><summary type="html">&lt;blockquote&gt;
&lt;h3&gt;主要内容:&lt;/h3&gt;
&lt;p&gt;之前使用的uboot都是直接编译就可以使用了, 但是作为一个愿意折腾的人, 这样的程度显然不够,&lt;br /&gt;
于是一如既往的打开了uboot的代码看起来吧!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;准备工作&lt;/h3&gt;
&lt;p&gt;1, Linux 64bit 系统电脑一台&lt;br /&gt;
2, 熟悉的编译器, 最好有代码引索功能的, 免得grep蛋疼&lt;br /&gt;
3, 下载源代码, 及芯片手册  &lt;/p&gt;
&lt;h3&gt;引导流程从这里开始&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;寻找srart源头:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;折腾过ARM的人必然知道, 系统启动前一定有一段汇编代码, 来设置时钟, 看门狗什么的.
通过前面的文章, 我们了解uboot编译后生成了两个东西是我们需要的, MLO和u-boot.img,
u-boot.img大家都知道, MLO是啥呢? 明显这个是omap4460启动时需要的, 而且是会自动
加载的二进制文件(关于omap4460的自启动过程可以参看手册 &amp;lt;27.1 Initialization Overview&amp;gt;),
那么启动的汇编代码应该就在MLO里了吧, 打开uboot代码的 Makefile (./Makefile), 发现  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./Makefile:1222
spl/u-boot-spl: tools prepare
    &lt;span class="k"&gt;$(&lt;/span&gt;Q&lt;span class="k"&gt;)$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;spl -f &lt;span class="k"&gt;$(&lt;/span&gt;srctree&lt;span class="k"&gt;)&lt;/span&gt;/scripts/Makefile.spl all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;spl在uboot里表示第二阶段启动代码, 其实就是芯片内部代码启动完后, 就会加载spl了,
那估计就是我们说的MLO了, 继续看, MLO必然和 scripts/Makefile.spl 文件有关, 查看之  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scripts/Makefile.spl:54
libs-&lt;span class="k"&gt;$(&lt;/span&gt;CONFIG_SPL_FRAMEWORK&lt;span class="k"&gt;)&lt;/span&gt; +&lt;span class="o"&gt;=&lt;/span&gt; common/spl/
libs-&lt;span class="k"&gt;$(&lt;/span&gt;CONFIG_SPL_LIBCOMMON_SUPPORT&lt;span class="k"&gt;)&lt;/span&gt; +&lt;span class="o"&gt;=&lt;/span&gt; common/
libs-&lt;span class="k"&gt;$(&lt;/span&gt;CONFIG_SPL_LIBDISK_SUPPORT&lt;span class="k"&gt;)&lt;/span&gt; +&lt;span class="o"&gt;=&lt;/span&gt; disk/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里只发现编译选项和编译内容, 貌似没什么线索了, 换一个想法, 编译的时候没看到, 是不是
在连接的时候能够看到点什么呢, 于是飞快敲入:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$make&lt;/span&gt; &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
   ....
   arm-none-linux-gnueabi-ld     -r -o spl/lib/built-in.o spl/lib/hashtable.o spl/lib/errno.o spl/lib/display_options.o spl/lib/crc32.o spl/lib/ctype.o spl/lib/div64.o spl/lib/hang.o spl/lib/linux_compat.o spl/lib/linux_string.o spl/lib/string.o spl/lib/time.o spl/lib/uuid.o spl/lib/vsprintf.o 
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; spl &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; arm-none-linux-gnueabi-ld   -T u-boot-spl.lds  --gc-sections -Bstatic --gc-sections -Ttext 0x40300000 arch/arm/cpu/armv7/start.o --start-group arch/arm/cpu/armv7/built-in.o arch/arm/cpu/built-in.o arch/arm/lib/built-in.o board/ti/panda/built-in.o common/spl/built-in.o common/built-in.o disk/built-in.o drivers/i2c/built-in.o drivers/gpio/built-in.o drivers/mmc/built-in.o drivers/serial/built-in.o fs/built-in.o lib/built-in.o --end-group arch/arm/lib/eabi_compat.o -L /mnt/ssd/arm-2014.05/bin/../lib/gcc/arm-none-linux-gnueabi/4.8.3/thumb2 -lgcc -Map u-boot-spl.map -o u-boot-spl&lt;span class="o"&gt;)&lt;/span&gt;
   ....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cd spl &amp;amp;&amp;amp; arm-none-linux-gnueabi-ld 连接是用的u-boot-spl.lds这个文件, 去看看:&lt;br /&gt;
(u-boot-spl.lds文件在uboot里有很多, 怎么判断? 在Makefile里找答案)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arch/arm/cpu/armv7/omap-common/u-boot-spl.lds:0
MEMORY &lt;span class="o"&gt;{&lt;/span&gt; .sram : &lt;span class="nv"&gt;ORIGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; CONFIG_SPL_TEXT_BASE,&lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; CONFIG_SPL_MAX_SIZE &lt;span class="o"&gt;}&lt;/span&gt;
MEMORY &lt;span class="o"&gt;{&lt;/span&gt; .sdram : &lt;span class="nv"&gt;ORIGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; CONFIG_SPL_BSS_START_ADDR, &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; CONFIG_SPL_BSS_MAX_SIZE &lt;span class="o"&gt;}&lt;/span&gt;

OUTPUT_FORMAT&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;elf32-littlearm&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;elf32-littlearm&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;elf32-littlearm&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
OUTPUT_ARCH&lt;span class="o"&gt;(&lt;/span&gt;arm&lt;span class="o"&gt;)&lt;/span&gt;
ENTRY&lt;span class="o"&gt;(&lt;/span&gt;_start&lt;span class="o"&gt;)&lt;/span&gt;
SECTIONS
&lt;span class="o"&gt;{&lt;/span&gt;
    .text      :
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;__start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; .&lt;span class="p"&gt;;&lt;/span&gt;
        *&lt;span class="o"&gt;(&lt;/span&gt;.vectors&lt;span class="o"&gt;)&lt;/span&gt;
        arch/arm/cpu/armv7/start.o  &lt;span class="o"&gt;(&lt;/span&gt;.text*&lt;span class="o"&gt;)&lt;/span&gt;
        *&lt;span class="o"&gt;(&lt;/span&gt;.text*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &amp;gt;.sram
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面定义的两个内存段, 分别是sram, sdram. sram是芯片内部的一段存储区, sdram是DDR
初始化完成后才能使用的地址区域.&lt;br /&gt;
.text段代码将全部放在sram中, 其中arch/arm/cpu/armv7/start.o里的.text段代码放在sram的
最开始的地方. 那么start.S就是我们要找的东西啦, 打开一看, 果然就是熟悉而又陌生的汇编代码
映满屏幕, 末要慌张, 听我慢慢分析, 其实很简单.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺流而下, 柳暗花明:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开start.S文件, 其实里面有很多注释, 已经足够我们去阅读这里的代码, 这里就会有人说了
"里面的汇编代码我不知道具体的含义啊", 很早之前我也会有这样的问题, 但是我发现, 就算我
当时能够很深入的探究, 当时算是相当明白的, 但是时间一久, 都会有遗忘, 看的时候还是要
重新查, 所以我认为, 在没有很必要的时候我是不会区深入查看这些代码的, 能了解大概在做什么
就好了.&lt;br /&gt;
这里也想赞一下国外码农的工程意识, 代码写的很有条理, 注释也非常详细, 值得我们学习.  &lt;/p&gt;
&lt;p&gt;这里我就列出主要调用流程:  &lt;/p&gt;
&lt;pre class="prettyprint"&gt;
/* Allow the board to save important registers */
b   save_boot_params  // 里实际上就是保存一下函数的返回地址
    |- disable interrupts
    |- b cpu_init_cp15  ---&gt; |- Invalidate L1 I/D  // 无效 指令/数据 缓存
    |                        |- disable MMU        // 方便后续的内存访问, 不需要填写TLB
    |
    |- b cpu_init_crit  ---&gt; |- b lowlevel_init --&gt; |- Setup a temporary stack // 设置SP指针, 估计马上要跑C代码了
    |                                               |- b s_init --&gt; |- init_omap_revision // 获取芯片ID
    |                                                               |- watchdog_init // 初始化看门狗
    |                                                               |- force_emif_self_refresh(); // 初始化DDR
    |                                                               |- setup_clocks_for_console // 开时钟等工作
    |- b _main --&gt; |- setup SP // Set up initial C runtime environment
                   |- relocate_code // 代码从定位
                   |- clear BSS
                   |- ldr pc, =board_init_r // 正式进入uboot地界

相关文件地址:
arch/arm/cpu/armv7/start.S
arch/arm/cpu/armv7/lowlevel_init.S
arch/arm/cpu/armv7/omap-common/hwinit-common.c
arch/arm/lib/crt0.S
arch/arm/lib/board.c
&lt;/pre&gt;

&lt;p&gt;上面展示东西不多, 但是包含的东西确是大大滴多啊, 涉及的基础知识很多, 如计算机理论, 编译连接 等, 
是不是瞬间有了"望尽天涯路"的感觉.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料:&lt;br /&gt;
[1]: &lt;a href="http://www.denx.de/wiki/U-Boot"&gt;Universal Boot Loader &lt;/a&gt;&lt;br /&gt;
[2]: &lt;a href="http://www.ti.com/product/omap4460"&gt;TI omap4460&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="uboot"></category><category term="pandaboard"></category></entry><entry><title>Archlinux Setup Quartus II 15.0</title><link href="http://kgat96.github.io/articles/2015/08/08/archlinux-setup-quartus-15/" rel="alternate"></link><updated>2015-08-08T10:00:00+08:00</updated><author><name>Kage Shen</name></author><id>tag:kgat96.github.io,2015-08-08:articles/2015/08/08/archlinux-setup-quartus-15/</id><summary type="html">&lt;blockquote&gt;
&lt;h3&gt;主要内容:&lt;/h3&gt;
&lt;p&gt;因为工作需要使用到 Quartus II, 于是乎就整了个XP电脑, 装了软件, 只是用习惯了Linux&lt;br /&gt;
突然又要我用XP, 只能是让我无力吐槽啊, 发现Quartus有linux版本的, 果断安装之, 装完&lt;br /&gt;
后面x解的事情就交给你们自己了, 我就不说了 ...  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;准备工作&lt;/h3&gt;
&lt;p&gt;1, Linux 64bit 系统电脑一台&lt;/p&gt;
&lt;h3&gt;下载 Quartus II 15.0 软件&lt;/h3&gt;
&lt;p&gt;送上&lt;a href="http://download.altera.com/akdlm/software/acdsinst/15.0/145/ib_installers/QuartusSetup-15.0.0.145-linux.run"&gt;下载地址&lt;/a&gt;, 请叫我雷锋!&lt;br /&gt;
这个版本是自带 Cyclone IV 库的 (安装的时候可以选择安装)&lt;/p&gt;
&lt;h3&gt;安装配置&lt;/h3&gt;
&lt;p&gt;1, 加上执行权限把&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#chmod +x QuartusSetup-15.0.0.145-linux.run&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2, 安装&lt;/p&gt;
&lt;p&gt;这里你就直接运行它就可以了, 中间需要你选择安装路径什么的, 相信你都会吧 :)&lt;/p&gt;
&lt;p&gt;安装好后 就可以直接运行了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#./altera/15.0/quartus/bin/quartus --64bit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不过你会发现它启动不了, 好吧, 再终端命令行里执行一下, 发现如下错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;libpng12.so.0: cannot open shared object file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一番谷歌后了解到, 这个库现在已经不用了, 所以很多机器没用这个库了,
那么就需要我们自己安装一个这样的库咯, 我用的是 archlinux, 其它的发行版应该类似.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://aur.archlinux.org/packages/li/libpng12/PKGBUILD
makepkg ./PKGBUILD
makepkg -i ./PKGBUILD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上它就是下载了一个libpng, 编译安装的, 所以这个方法也可以试试.&lt;br /&gt;
http://sourceforge.net/projects/libpng/files/libpng-12.tar.xz&lt;/p&gt;
&lt;p&gt;到了这个, 这个软件基本就能用了, 那么我可以还需要使用到 USB Blaster, 需要配置一下
USB设备的权限, 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#touch /etc/udev/rules.d/51-altera-usb-blaster.rules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加入一下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;09fb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6001&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;09fb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6002&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;09fb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6003&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;09fb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6010&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;09fb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;6810&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启一下电脑, 打开软件, 就能识别你的usb硬件了.&lt;/p&gt;
&lt;p&gt;最后, 有图有真相嘛:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="picture" src="http://7xigc2.com1.z0.glb.clouddn.com/archlinux-setup-quartus-15-p1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料:&lt;br /&gt;
[1]: &lt;a href="https://wiki.archlinux.org/index.php/Altera_Design_Software"&gt;Altera Design Software&lt;/a&gt;&lt;br /&gt;
[2]: &lt;a href="http://bbs.eetop.cn/viewthread.php?tid=485257"&gt;注(po)册(jie)&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="fpga"></category><category term="linux"></category><category term="quartus"></category></entry><entry><title>PandaBoard ES USB Gadget Ethernet</title><link href="http://kgat96.github.io/articles/2015/05/31/debug-for-usb-gadget-ethernet/" rel="alternate"></link><updated>2015-05-31T10:00:00+08:00</updated><author><name>Kage Shen</name></author><id>tag:kgat96.github.io,2015-05-31:articles/2015/05/31/debug-for-usb-gadget-ethernet/</id><summary type="html">&lt;blockquote&gt;
&lt;h3&gt;主要内容:&lt;/h3&gt;
&lt;p&gt;当你调试的使用如果有网络,是不是很方便呢!但是你想搭建环境的时候却发现各种麻
烦,例如需要专门的硬件(路由器),需要一根网线链接，没有路由的话可能要来回插
拔网线,很是麻烦.大家电脑USB口都很多,那为什么不用USB来的调试板子呢?如果能
像ADB一样,那多方便啊,但是人家是Android啊,我们在调基本的linux的时候没有ADB
这样的服务啊,那能不能USB转网口来通信呢?网络一通什么nfs,ssh都能用了, 其他的
什么的都是浮云了，于是成文共享.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;准备工作&lt;/h3&gt;
&lt;p&gt;1，可以正常使用的开发板一个&lt;/p&gt;
&lt;p&gt;2，Linux系统电脑一台&lt;/p&gt;
&lt;p&gt;3，&amp;gt; 2G SD卡一张&lt;/p&gt;
&lt;p&gt;4，搭建编译环境&lt;/p&gt;
&lt;p&gt;根据前面的文章，想必现在板子也是能够启动了，不行的赶紧先看看前面的文章。&lt;/p&gt;
&lt;h3&gt;配置 Kernel 编译选项&lt;/h3&gt;
&lt;p&gt;其中需要选定的是下面几个选项&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; CONFIG_USB_MUSB_HDRC
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; MUSB Mode Selection &lt;span class="o"&gt;(&lt;/span&gt;Dual Role mode&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; CONFIG_TWL6030_USB
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; CONFIG_USB_GADGET
    &lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; USB Gadget Drivers &lt;span class="o"&gt;(&lt;/span&gt;CONFIG_USB_ETH&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里是已经配置好的 &lt;strong&gt;&lt;a href="http://7xigc2.com1.z0.glb.clouddn.com/omap2plus_defconfig.txt"&gt;config&lt;/a&gt;&lt;/strong&gt;，我的是 linux4.0 版本，不过里面的选项差不多，对比USB部分配置即可。&lt;/p&gt;
&lt;h3&gt;配置网络&lt;/h3&gt;
&lt;p&gt;使用新编译的boot.img镜像来启动开发板，然后用USB线连接到电脑上（板子的OTG口接到电脑的USB口上），此时电脑会出现一个usb网卡：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;enp0s20u9i1: &lt;span class="nv"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        ether ba:2c:17:c4:83:aa  txqueuelen &lt;span class="m"&gt;1000&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;
        RX packets &lt;span class="m"&gt;0&lt;/span&gt;  bytes &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;
        RX errors &lt;span class="m"&gt;0&lt;/span&gt;  dropped &lt;span class="m"&gt;0&lt;/span&gt;  overruns &lt;span class="m"&gt;0&lt;/span&gt;  frame 0
        TX packets &lt;span class="m"&gt;8&lt;/span&gt;  bytes &lt;span class="m"&gt;1184&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;1.1 KiB&lt;span class="o"&gt;)&lt;/span&gt;
        TX errors &lt;span class="m"&gt;0&lt;/span&gt;  dropped &lt;span class="m"&gt;0&lt;/span&gt; overruns &lt;span class="m"&gt;0&lt;/span&gt;  carrier &lt;span class="m"&gt;0&lt;/span&gt;  collisions 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;系统识别信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt; 2304.806598&lt;span class="o"&gt;]&lt;/span&gt; usbcore: registered new interface driver cdc_subset
&lt;span class="o"&gt;[&lt;/span&gt; 2304.806601&lt;span class="o"&gt;]&lt;/span&gt; cdc_ether: probe of 3-9:1.0 failed with error -16
&lt;span class="o"&gt;[&lt;/span&gt; 2304.806616&lt;span class="o"&gt;]&lt;/span&gt; usbcore: registered new interface driver cdc_ether
&lt;span class="o"&gt;[&lt;/span&gt; 2304.807396&lt;span class="o"&gt;]&lt;/span&gt; cdc_subset 3-9:1.1 enp0s20u9i1: renamed from usb0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果电脑上没有上面的信息，请确认你编译的Kernel的正确性。
首先设置开发板的IP地址以及网关：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ifconfig usb0 192.168.0.200 netmask 255.255.255.0 up&lt;/span&gt;
&lt;span class="c1"&gt;#route add default gw 192.168.0.201&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置电脑上的网络配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ifconfig enp0s20u13i1 192.168.0.201 netmask 255.255.255.0 up&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在就可以ping一下开发板了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#ping 192.168.0.200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你想板子通过电脑的网络来访问外网，那么你可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#iptables -A POSTROUTING -t nat -j MASQUERADE -s 192.168.0.0/24&lt;/span&gt;
&lt;span class="c1"&gt;#sysctl -w net.ipv4.ip_forward=1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你就可以在板子上访问外网了，好玩吧！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料:
[1]: &lt;a href="http://wiki.openmoko.org/wiki/USB_Networking"&gt;Openmoko Networking Setup USB Networking&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Pandaboard"></category></entry><entry><title>PandaBoard ES 下 Kernel 4.0.0 的移植</title><link href="http://kgat96.github.io/articles/2015/05/01/build-new-kernel-on-pandaboard/" rel="alternate"></link><updated>2015-05-01T10:00:00+08:00</updated><author><name>Kage Shen</name></author><id>tag:kgat96.github.io,2015-05-01:articles/2015/05/01/build-new-kernel-on-pandaboard/</id><summary type="html">&lt;blockquote&gt;
&lt;h3&gt;主要内容:&lt;/h3&gt;
&lt;p&gt;实际上 &lt;strong&gt;Kernel 4.0.0&lt;/strong&gt; 已经支持 &lt;a href="http://pandaboard.org"&gt;PandaBoard&lt;/a&gt; 的，应该是 &lt;strong&gt;Kernel&lt;/strong&gt; 主分支都是支持这块板子的，只是在实际让最新 Kernel 跑起来的过程中还是有一些问题的，所以本文就是告诉你一步步让它跑起来的。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;准备工作&lt;/h3&gt;
&lt;p&gt;1，可以正常使用的开发板一个&lt;/p&gt;
&lt;p&gt;2，Linux系统电脑一台&lt;/p&gt;
&lt;p&gt;3，&amp;gt; 2G SD卡一张&lt;/p&gt;
&lt;p&gt;4，搭建编译环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下载 arm-gcc 编译器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arm-2014.05-29-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2
&lt;span class="c1"&gt;#arm-none-linux-gnueabi-gcc -v&lt;/span&gt;
gcc version 4.8.3 &lt;span class="m"&gt;20140320&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;prerelease&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Sourcery CodeBench Lite 2014.05-29&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步库 linux-omap (Kernel)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#git clone git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步库 uboot (bootloader)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;原生库在  &lt;a href="http://www.denx.de"&gt;www.denx.de&lt;/a&gt; 非常慢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#git clone https://github.com/RobertCNelson/u-boot.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下载根文件系统 (ubuntu-14.04.2)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#wget -c https://rcn-ee.com/rootfs/eewiki/minfs/ubuntu-14.04.2-minimal-armhf-2015-04-27.tar.xz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;让它板子飞起来&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1，格式化&amp;amp;制作启动分区&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#fdisk -l&lt;/span&gt;
Disk /dev/sdc: 1.9 GiB, &lt;span class="m"&gt;2014838784&lt;/span&gt; bytes, &lt;span class="m"&gt;3935232&lt;/span&gt; sectors
Units: sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disklabel type: dos
Disk identifier: 0xfb04e098

Device     Boot  Start     End Sectors  Size Id Type
/dev/sdc1  *      &lt;span class="m"&gt;2048&lt;/span&gt;  &lt;span class="m"&gt;264191&lt;/span&gt;  &lt;span class="m"&gt;262144&lt;/span&gt;  128M  c W95 FAT32 &lt;span class="o"&gt;(&lt;/span&gt;LBA&lt;span class="o"&gt;)&lt;/span&gt;
/dev/sdc2       &lt;span class="m"&gt;264192&lt;/span&gt; &lt;span class="m"&gt;3935231&lt;/span&gt; &lt;span class="m"&gt;3671040&lt;/span&gt;  1.8G &lt;span class="m"&gt;83&lt;/span&gt; Linux
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;这里有两点要注意：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个分区一定是 W95 FAT32 (LBA) 格式&lt;/li&gt;
&lt;li&gt;第一个分区一定是可以引导的，既有 Boot *&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2，编译 Uboot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最新的Uboot整的和Kernel的一样的图形化的配置界面了，略屌.&lt;/p&gt;
&lt;p&gt;&lt;img alt="uboot menuconfig" src="http://7xigc2.com1.z0.glb.clouddn.com/build-new-kernel-on-pandaboard-p1.png" /&gt;&lt;/p&gt;
&lt;p&gt;那么编译自然也和Kernel一样啦，这里先不对Uboot做修改，免得大家看不懂哈&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#export ARCH=arm&lt;/span&gt;
&lt;span class="c1"&gt;#export CROSS_COMPILE=arm-none-linux-gnueabi-&lt;/span&gt;
&lt;span class="c1"&gt;#make omap4_panda_defconfig&lt;/span&gt;
&lt;span class="c1"&gt;#make -j8&lt;/span&gt;
  ...
  OBJCOPY u-boot.bin
  MKIMAGE u-boot.img
  OBJCOPY u-boot.srec
  CC      spl/common/spl/spl.o
  LD      spl/common/spl/built-in.o
  CC      spl/lib/display_options.o
  LD      spl/lib/built-in.o
  LD      spl/u-boot-spl
  OBJCOPY spl/u-boot-spl.bin
  MKIMAGE MLO
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里生成了几个比较重要的文件  &lt;strong&gt;MLO、u-boot.img&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MLO：&lt;/strong&gt; TI x-loader 第二引导阶段的执行文件，omap启动的时候会读取这个文件，并load进内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;u-boot.img：&lt;/strong&gt; 这个不解释了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2，编译 Kernel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编译之前我们需要做件事情，开启启动时候的打印 (&lt;strong&gt;EARLY_PRINTK&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;patch to omap2plus_defconfig:
+CONFIG_DEBUG_LL&lt;span class="o"&gt;=&lt;/span&gt;y
+CONFIG_DEBUG_OMAP4UART3&lt;span class="o"&gt;=&lt;/span&gt;y
+CONFIG_DEBUG_OMAP2PLUS_UART&lt;span class="o"&gt;=&lt;/span&gt;y
+CONFIG_DEBUG_LL_INCLUDE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debug/omap2plus.S&amp;quot;&lt;/span&gt;
+CONFIG_EARLY_PRINTK&lt;span class="o"&gt;=&lt;/span&gt;y
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm-none-linux-gnueabi-
make omap2plus_defconfig
make zImage -j8  // 这里就使用zImage就可以了
make dtbs
cat arch/arm/boot/zImage arch/arm/boot/dts/omap4-panda-es.dtb &amp;gt; /tmp/appended
mkimage -A arm -O linux -T kernel -C none -a 0x80008000 -e 0x80008000 &lt;span class="se"&gt;\&lt;/span&gt;
         -n &lt;span class="s2"&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt; -d /tmp/appended /tmp/uImage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里最后生成了uImage，那为什么不用 &lt;strong&gt;make uImage&lt;/strong&gt; 来一步生成呢，当然你可以先测试一下看看。
实际上从 linux 3.10 后，代码库就开始使用 dtbs 文件来描述板机配置，问什么，大家自己了解吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，制作启动SD卡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拷贝刚才生成的 &lt;strong&gt;uImage MLO u-boot.img&lt;/strong&gt; 到第一个分区，将下载的 &lt;strong&gt;ubuntu-14.04.2-minimal-armhf-2015-04-27.tar.xz&lt;/strong&gt; 解压到第二个分区。&lt;/p&gt;
&lt;p&gt;好了终于可以看到他启动了 : )&lt;/p&gt;
&lt;p&gt;&lt;img alt="boot log" src="http://7xigc2.com1.z0.glb.clouddn.com/build-new-kernel-on-pandaboard-p2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
这里 omap4-panda-es.dtb 就是板级配置文件了，上面是将他和 zImage 和到了一起，实际上还有一种
更加灵活的方法，就是动态加载 dtb 文件，并加载相同的 zImage，下面提供 Uboot 动态加载命令：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="prettyprint"&gt;
&gt; Panda # load mmc 0 zImage 0x81000000
&gt; Panda # load mmc 0 omap4-panda-es.dtb x81f00000
&gt; Panda # bootz 0x81000000 - 0x81f00000
&lt;/pre&gt;</summary><category term="Pandaboard"></category></entry></feed>